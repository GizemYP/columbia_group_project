{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>gender</th>\n",
       "      <th>year</th>\n",
       "      <th>name</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1910</td>\n",
       "      <td>Mary</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1910</td>\n",
       "      <td>Annie</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1910</td>\n",
       "      <td>Anna</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1910</td>\n",
       "      <td>Margaret</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1910</td>\n",
       "      <td>Helen</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  state gender  year      name  count\n",
       "0    AK      F  1910      Mary     14\n",
       "1    AK      F  1910     Annie     12\n",
       "2    AK      F  1910      Anna     10\n",
       "3    AK      F  1910  Margaret      8\n",
       "4    AK      F  1910     Helen      7"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import glob\n",
    "\n",
    "#create a dataframe\n",
    "name_df = pd.DataFrame()\n",
    "\n",
    "#open, read all text files and name the column labels\n",
    "for files in glob.glob('data/*.txt'):\n",
    "    comb_data = pd.read_csv(files,names=['state', 'gender', 'year', 'name', 'count'])\n",
    "#concatenate text files in the dataframe\n",
    "    name_df = pd.concat([name_df,comb_data],axis=0,ignore_index=True)\n",
    "name_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6028151"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#total row count\n",
    "total_count=name_df['name'].count()\n",
    "total_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "311155210"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#total pupulation sum\n",
    "total_sum=name_df['count'].sum()\n",
    "total_sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#write output to csv\n",
    "name_df.to_csv('output_data/nameDataAll.csv', index_label=\"index\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>state</th>\n",
       "      <th>gender</th>\n",
       "      <th>year</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Jennifer</th>\n",
       "      <td>4570</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Michelle</th>\n",
       "      <td>4571</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kimberly</th>\n",
       "      <td>4572</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lisa</th>\n",
       "      <td>4573</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mary</th>\n",
       "      <td>4574</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shannon</th>\n",
       "      <td>4575</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Julie</th>\n",
       "      <td>4576</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angela</th>\n",
       "      <td>4577</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Heather</th>\n",
       "      <td>4578</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dawn</th>\n",
       "      <td>4579</td>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>1970</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          index state gender  year  count\n",
       "name                                     \n",
       "Jennifer   4570    AK      F  1970     81\n",
       "Michelle   4571    AK      F  1970     78\n",
       "Kimberly   4572    AK      F  1970     66\n",
       "Lisa       4573    AK      F  1970     54\n",
       "Mary       4574    AK      F  1970     47\n",
       "Shannon    4575    AK      F  1970     47\n",
       "Julie      4576    AK      F  1970     44\n",
       "Angela     4577    AK      F  1970     42\n",
       "Heather    4578    AK      F  1970     38\n",
       "Dawn       4579    AK      F  1970     37"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#extract data that needs to be dropped out of the main df and then drop it\n",
    "old_names=name_df[(name_df['year']>=1910)&(name_df['year']<=1969)].index\n",
    "\n",
    "#drop data selected on the noted range\n",
    "name_df.drop(old_names, inplace=True)\n",
    "\n",
    "#remaining df\n",
    "name_df.reset_index().set_index(\"name\").head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3610928"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1970 and forward count\n",
    "shortDF_count=name_df['name'].count()\n",
    "shortDF_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "155660164"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1970 and forward sum\n",
    "shortDF_count=name_df['count'].sum()\n",
    "shortDF_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#write output to csv\n",
    "name_df.to_csv('output_data/nameData70on.csv', index_label=\"index\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gender\n",
       "F    72444925\n",
       "M    83215239\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#total pupulation by gender\n",
    "name_df_sorted_sum=name_df.groupby('gender')['count'].sum()\n",
    "name_df_sorted_sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.patches import Ellipse\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "#total_pupulation\n",
    "labels=[\"Female\", \"Male\"]\n",
    "sizes=name_df_sorted_sum\n",
    "colors=[\"salmon\", \"skyblue\"]\n",
    "explode=(0, 0.1)\n",
    "\n",
    "# Build Pie Chart\n",
    "plt.title(\"% of Top 10 Popular by Gender (1970 - 2018)\", fontsize=15)\n",
    "plt.pie(sizes, explode=explode, labels=labels, colors=colors,\n",
    "       autopct=\"%1.1f%%\", shadow=True, startangle=140)\n",
    "\n",
    "# Show and Save the Figure\n",
    "plt.savefig(\"output_data/70sForward_names.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"10\" valign=\"top\">F</th>\n",
       "      <th>Amanda</th>\n",
       "      <td>741208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ashley</th>\n",
       "      <td>842882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Elizabeth</th>\n",
       "      <td>733718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Emily</th>\n",
       "      <td>748610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jennifer</th>\n",
       "      <td>1248282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jessica</th>\n",
       "      <td>1023680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Melissa</th>\n",
       "      <td>606712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nicole</th>\n",
       "      <td>566474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sarah</th>\n",
       "      <td>783258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stephanie</th>\n",
       "      <td>592951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"10\" valign=\"top\">M</th>\n",
       "      <th>Christopher</th>\n",
       "      <td>1688826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Daniel</th>\n",
       "      <td>1189000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>David</th>\n",
       "      <td>1370479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>James</th>\n",
       "      <td>1335487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>John</th>\n",
       "      <td>1218600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Joseph</th>\n",
       "      <td>1105913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Joshua</th>\n",
       "      <td>1197265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Matthew</th>\n",
       "      <td>1425530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Michael</th>\n",
       "      <td>2218310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>William</th>\n",
       "      <td>1089835</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      count\n",
       "gender name                \n",
       "F      Amanda        741208\n",
       "       Ashley        842882\n",
       "       Elizabeth     733718\n",
       "       Emily         748610\n",
       "       Jennifer     1248282\n",
       "       Jessica      1023680\n",
       "       Melissa       606712\n",
       "       Nicole        566474\n",
       "       Sarah         783258\n",
       "       Stephanie     592951\n",
       "M      Christopher  1688826\n",
       "       Daniel       1189000\n",
       "       David        1370479\n",
       "       James        1335487\n",
       "       John         1218600\n",
       "       Joseph       1105913\n",
       "       Joshua       1197265\n",
       "       Matthew      1425530\n",
       "       Michael      2218310\n",
       "       William      1089835"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#10 most pupulart names - for each gender, sorted by gender/name in alphabetical order \n",
    "name_df_name_sum=name_df.groupby(['gender','name'])['count'].sum().reset_index().sort_values(by='count',ascending=False).reset_index(drop=True)\n",
    "name_df_name_sum_sorted=name_df_name_sum.groupby('gender').head(10)\n",
    "name_df_name_sum_sorted.sort_values(['gender','name']).set_index(['gender','name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>name</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M</td>\n",
       "      <td>Michael</td>\n",
       "      <td>2218310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>1688826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M</td>\n",
       "      <td>Matthew</td>\n",
       "      <td>1425530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M</td>\n",
       "      <td>David</td>\n",
       "      <td>1370479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M</td>\n",
       "      <td>James</td>\n",
       "      <td>1335487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>M</td>\n",
       "      <td>John</td>\n",
       "      <td>1218600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>M</td>\n",
       "      <td>Joshua</td>\n",
       "      <td>1197265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>M</td>\n",
       "      <td>Daniel</td>\n",
       "      <td>1189000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>M</td>\n",
       "      <td>Joseph</td>\n",
       "      <td>1105913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>M</td>\n",
       "      <td>William</td>\n",
       "      <td>1089835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>F</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>1248282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>F</td>\n",
       "      <td>Jessica</td>\n",
       "      <td>1023680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>F</td>\n",
       "      <td>Ashley</td>\n",
       "      <td>842882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>F</td>\n",
       "      <td>Sarah</td>\n",
       "      <td>783258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>F</td>\n",
       "      <td>Emily</td>\n",
       "      <td>748610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>F</td>\n",
       "      <td>Amanda</td>\n",
       "      <td>741208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>F</td>\n",
       "      <td>Elizabeth</td>\n",
       "      <td>733718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>F</td>\n",
       "      <td>Melissa</td>\n",
       "      <td>606712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>F</td>\n",
       "      <td>Stephanie</td>\n",
       "      <td>592951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>F</td>\n",
       "      <td>Nicole</td>\n",
       "      <td>566474</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender         name    count\n",
       "0       M      Michael  2218310\n",
       "1       M  Christopher  1688826\n",
       "2       M      Matthew  1425530\n",
       "3       M        David  1370479\n",
       "4       M        James  1335487\n",
       "5       M         John  1218600\n",
       "6       M       Joshua  1197265\n",
       "7       M       Daniel  1189000\n",
       "8       M       Joseph  1105913\n",
       "9       M      William  1089835\n",
       "10      F     Jennifer  1248282\n",
       "11      F      Jessica  1023680\n",
       "12      F       Ashley   842882\n",
       "13      F        Sarah   783258\n",
       "14      F        Emily   748610\n",
       "15      F       Amanda   741208\n",
       "16      F    Elizabeth   733718\n",
       "17      F      Melissa   606712\n",
       "18      F    Stephanie   592951\n",
       "19      F       Nicole   566474"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#10 most pupulart names - for each gender, sorted from the most popular in decending order\n",
    "name_df_name_sum=name_df.groupby(['gender','name'])['count'].sum().reset_index().sort_values(by='count',ascending=False).reset_index(drop=True)\n",
    "name_df_name_sum_sorted=name_df_name_sum.groupby('gender').head(10)\n",
    "name_df_name_sum_sorted.sort_values(['gender','count'], ascending=False).reset_index(drop=True) #.set_index(['gender','name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#write output to csv\n",
    "name_df_name_sum_sorted.to_csv('output_data/FM10popular70on.csv', index_label=\"index\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21727020"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1970 and forward sum of top 10 per gender\n",
    "top10DF_sum=name_df_name_sum_sorted['count'].sum()\n",
    "top10DF_sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gender\n",
       "F     7887775\n",
       "M    13839245\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sum of 10 popular  by gender\n",
    "sumPopularByGender=name_df_name_sum_sorted.groupby('gender')['count'].sum()\n",
    "sumPopularByGender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1970 - 2018 popular names by gender\n",
    "labels=[\"Female\", \"Male\"]\n",
    "sizes=sumPopularByGender\n",
    "colors=[\"salmon\", \"skyblue\"]\n",
    "explode=(0, 0.1)\n",
    "\n",
    "# Build Pie Chart\n",
    "plt.title(\"% of Top 10 Popular by Gender (1970 - 2018)\", fontsize=15)\n",
    "plt.pie(sizes, explode=explode, labels=labels, colors=colors,\n",
    "       autopct=\"%1.1f%%\", shadow=True, startangle=140)\n",
    "\n",
    "# Show and Save the Figure\n",
    "plt.savefig(\"output_data/70sForward_popular_names.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "state  gender  gender  state  name       \n",
       "AK     F       F       AK     Jessica         2647\n",
       "                              Jennifer        2646\n",
       "                              Sarah           2310\n",
       "                              Amanda          1875\n",
       "                              Elizabeth       1821\n",
       "                              Ashley          1676\n",
       "                              Emily           1674\n",
       "                              Heather         1409\n",
       "                              Samantha        1404\n",
       "                              Michelle        1290\n",
       "       M       M       AK     Michael         5208\n",
       "                              Christopher     3991\n",
       "                              James           3610\n",
       "                              David           3449\n",
       "                              Matthew         3241\n",
       "                              John            3221\n",
       "                              Joshua          3177\n",
       "                              Robert          2964\n",
       "                              Daniel          2943\n",
       "                              William         2930\n",
       "AL     F       F       AL     Jennifer       16998\n",
       "                              Ashley         15361\n",
       "                              Jessica        15284\n",
       "                              Amanda         12309\n",
       "                              Mary           11933\n",
       "                              Elizabeth      11199\n",
       "                              Kimberly       10995\n",
       "                              Emily          10860\n",
       "                              Sarah           9537\n",
       "                              Anna            8792\n",
       "                                             ...  \n",
       "WV     M       M       WV     Michael        15304\n",
       "                              James          13684\n",
       "                              Christopher    13187\n",
       "                              Joshua         10957\n",
       "                              David          10543\n",
       "                              Matthew        10113\n",
       "                              John            9881\n",
       "                              William         9716\n",
       "                              Robert          9434\n",
       "                              Jason           9082\n",
       "WY     F       F       WY     Jennifer        2424\n",
       "                              Jessica         1924\n",
       "                              Amanda          1664\n",
       "                              Sarah           1577\n",
       "                              Ashley          1387\n",
       "                              Heather         1286\n",
       "                              Elizabeth       1222\n",
       "                              Amy             1063\n",
       "                              Amber           1043\n",
       "                              Emily           1039\n",
       "       M       M       WY     Michael         3679\n",
       "                              Christopher     2843\n",
       "                              Joshua          2513\n",
       "                              Matthew         2497\n",
       "                              James           2314\n",
       "                              David           2131\n",
       "                              John            1994\n",
       "                              Robert          1983\n",
       "                              Jason           1950\n",
       "                              Ryan            1907\n",
       "Name: count, Length: 1020, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#10 most pupulart names by state - total name count\n",
    "name_df_name_sum=name_df.groupby(['gender','state','name']).sum()\n",
    "name_df_10_largest=name_df_name_sum.groupby(['state','gender'])['count'].nlargest(10)\n",
    "name_df_10_largest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#write output to csv\n",
    "name_df_10_largest.to_csv('output_data/10popularByGen.State70on.csv', header=False)                          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Name</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Jessica</td>\n",
       "      <td>2647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>2646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Sarah</td>\n",
       "      <td>2310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Amanda</td>\n",
       "      <td>1875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Elizabeth</td>\n",
       "      <td>1821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Ashley</td>\n",
       "      <td>1676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Emily</td>\n",
       "      <td>1674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Heather</td>\n",
       "      <td>1409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Samantha</td>\n",
       "      <td>1404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>AK</td>\n",
       "      <td>F</td>\n",
       "      <td>Michelle</td>\n",
       "      <td>1290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>Michael</td>\n",
       "      <td>5208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>3991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>James</td>\n",
       "      <td>3610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>David</td>\n",
       "      <td>3449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>Matthew</td>\n",
       "      <td>3241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>John</td>\n",
       "      <td>3221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>Joshua</td>\n",
       "      <td>3177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>Robert</td>\n",
       "      <td>2964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>Daniel</td>\n",
       "      <td>2943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>AK</td>\n",
       "      <td>M</td>\n",
       "      <td>William</td>\n",
       "      <td>2930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>16998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Ashley</td>\n",
       "      <td>15361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Jessica</td>\n",
       "      <td>15284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Amanda</td>\n",
       "      <td>12309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Mary</td>\n",
       "      <td>11933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Elizabeth</td>\n",
       "      <td>11199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Kimberly</td>\n",
       "      <td>10995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Emily</td>\n",
       "      <td>10860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Sarah</td>\n",
       "      <td>9537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>AL</td>\n",
       "      <td>F</td>\n",
       "      <td>Anna</td>\n",
       "      <td>8792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>Michael</td>\n",
       "      <td>15304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>James</td>\n",
       "      <td>13684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>13187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>Joshua</td>\n",
       "      <td>10957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>David</td>\n",
       "      <td>10543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>Matthew</td>\n",
       "      <td>10113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>John</td>\n",
       "      <td>9881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>William</td>\n",
       "      <td>9716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>Robert</td>\n",
       "      <td>9434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>WV</td>\n",
       "      <td>M</td>\n",
       "      <td>Jason</td>\n",
       "      <td>9082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>2424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Jessica</td>\n",
       "      <td>1924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Amanda</td>\n",
       "      <td>1664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Sarah</td>\n",
       "      <td>1577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Ashley</td>\n",
       "      <td>1387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Heather</td>\n",
       "      <td>1286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1006</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Elizabeth</td>\n",
       "      <td>1222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Amy</td>\n",
       "      <td>1063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1008</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Amber</td>\n",
       "      <td>1043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1009</th>\n",
       "      <td>WY</td>\n",
       "      <td>F</td>\n",
       "      <td>Emily</td>\n",
       "      <td>1039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1010</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>Michael</td>\n",
       "      <td>3679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1011</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>Christopher</td>\n",
       "      <td>2843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1012</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>Joshua</td>\n",
       "      <td>2513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1013</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>Matthew</td>\n",
       "      <td>2497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1014</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>James</td>\n",
       "      <td>2314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1015</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>David</td>\n",
       "      <td>2131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>John</td>\n",
       "      <td>1994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>Robert</td>\n",
       "      <td>1983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1018</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>Jason</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1019</th>\n",
       "      <td>WY</td>\n",
       "      <td>M</td>\n",
       "      <td>Ryan</td>\n",
       "      <td>1907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1020 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     State Gender         Name  Count\n",
       "0       AK      F      Jessica   2647\n",
       "1       AK      F     Jennifer   2646\n",
       "2       AK      F        Sarah   2310\n",
       "3       AK      F       Amanda   1875\n",
       "4       AK      F    Elizabeth   1821\n",
       "5       AK      F       Ashley   1676\n",
       "6       AK      F        Emily   1674\n",
       "7       AK      F      Heather   1409\n",
       "8       AK      F     Samantha   1404\n",
       "9       AK      F     Michelle   1290\n",
       "10      AK      M      Michael   5208\n",
       "11      AK      M  Christopher   3991\n",
       "12      AK      M        James   3610\n",
       "13      AK      M        David   3449\n",
       "14      AK      M      Matthew   3241\n",
       "15      AK      M         John   3221\n",
       "16      AK      M       Joshua   3177\n",
       "17      AK      M       Robert   2964\n",
       "18      AK      M       Daniel   2943\n",
       "19      AK      M      William   2930\n",
       "20      AL      F     Jennifer  16998\n",
       "21      AL      F       Ashley  15361\n",
       "22      AL      F      Jessica  15284\n",
       "23      AL      F       Amanda  12309\n",
       "24      AL      F         Mary  11933\n",
       "25      AL      F    Elizabeth  11199\n",
       "26      AL      F     Kimberly  10995\n",
       "27      AL      F        Emily  10860\n",
       "28      AL      F        Sarah   9537\n",
       "29      AL      F         Anna   8792\n",
       "...    ...    ...          ...    ...\n",
       "990     WV      M      Michael  15304\n",
       "991     WV      M        James  13684\n",
       "992     WV      M  Christopher  13187\n",
       "993     WV      M       Joshua  10957\n",
       "994     WV      M        David  10543\n",
       "995     WV      M      Matthew  10113\n",
       "996     WV      M         John   9881\n",
       "997     WV      M      William   9716\n",
       "998     WV      M       Robert   9434\n",
       "999     WV      M        Jason   9082\n",
       "1000    WY      F     Jennifer   2424\n",
       "1001    WY      F      Jessica   1924\n",
       "1002    WY      F       Amanda   1664\n",
       "1003    WY      F        Sarah   1577\n",
       "1004    WY      F       Ashley   1387\n",
       "1005    WY      F      Heather   1286\n",
       "1006    WY      F    Elizabeth   1222\n",
       "1007    WY      F          Amy   1063\n",
       "1008    WY      F        Amber   1043\n",
       "1009    WY      F        Emily   1039\n",
       "1010    WY      M      Michael   3679\n",
       "1011    WY      M  Christopher   2843\n",
       "1012    WY      M       Joshua   2513\n",
       "1013    WY      M      Matthew   2497\n",
       "1014    WY      M        James   2314\n",
       "1015    WY      M        David   2131\n",
       "1016    WY      M         John   1994\n",
       "1017    WY      M       Robert   1983\n",
       "1018    WY      M        Jason   1950\n",
       "1019    WY      M         Ryan   1907\n",
       "\n",
       "[1020 rows x 4 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "#create DF of top 10 names per state per gender from csv, create a header\n",
    "top10perGenderState=pd.read_csv('output_data/10popularByGen.State70on.csv', \n",
    "                                names=['State','Gender','gender1','state1','Name','Count'])\n",
    "#print DF and drop duplicated columns\n",
    "top10perGenderState.drop(['gender1','state1'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
